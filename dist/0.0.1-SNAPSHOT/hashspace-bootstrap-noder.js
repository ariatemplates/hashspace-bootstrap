(function(define) {
define("alert/alert.hsp", ["hsp/$set","./alert","hsp/rt"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

    var alertCtrl = require("./alert");
    var alertController = alertCtrl.AlertController;


var alert =$set(exports, "alert", require("hsp/rt").template({ctl:[alertController,"alertController"],ref:"ctrl"}, function(n){
  var _ctrl;try {_ctrl=ctrl} catch(e) {_ctrl=n.g('ctrl')};
  var __s = {ctrl : typeof ctrl === 'undefined' ? n.g('ctrl') : ctrl};
  return [__s,n.$if({e1:[9,"!ctrl._closed"]},1,[n.elt("div",{e1:[9,"ctrl.typeClass"],e2:[9,"ctrl.fadeClass"]},{"class":["alert ",1," ",2],"role":"alert"},0,[n.$if({e1:[9,"ctrl.closebutton"]},1,[n.elt("button",{e1:[9,"ctrl._onclose()"]},{"type":"button","class":"close"},{"click":1},[n.elt("span",0,{"aria-hidden":"true"},0,[n.$text(0,["Ã—"])]),n.elt("span",0,{"class":"sr-only"},0,[n.$text(0,["Close"])])])]),n.cpt([null,"ctrl","content"],0,0,0)])])];
}));

});
define("alert/alert.js", ["hsp/$set","hsp/klass"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); var klass = require("hsp/klass");

$set(exports, "AlertController", new klass({
    $attributes : {
        "closebutton" : {
            type : "boolean",
            defaultValue : true,
            binding : "1-way"
        },
        "fade" : {
            type : "boolean",
            defaultValue : true
        },
        "type" : {
            type : "string",
            defaultValue : "danger",
            binding : "1-way"
        },
        "content" : {
            type : "template",
            defaultContent : true
        },
        "closed" : {
            type : "boolean",
            defaultValue : false,
            binding : "2-way"
        }, // used to bind the onclose method
        "onclosestart" : {
            type : "callback"
        },
        "oncloseend" : {
            type : "callback"
        }
    },
    $init : function () {
        $set(this, "_closed", false);
        $set(this, "_eventListener", null);
        $set(this, "transitionEnd", this.getTransitionEnd());
        $set(this, "_hasTransitions", (this.transitionEnd && this.fade));
        $set(this, "fadeClass", (this._hasTransitions) ? 'fade in' : '');
        $set(this, "typeClass", "alert-" + this.type);
    },
    $refresh : function () {},
    _onclose : function () {
        $set(this, "closed", true);
    },
    $onTypeChange: function () {
        $set(this, "typeClass", "alert-" + this.type);
    },
    $onClosedChange : function () {
        if (this.closed) {
            this.onclose();
        } else {
            $set(this, "_closed", false);
            if (this._hasTransitions) {
                $set(this, "fadeClass", 'fade');
                var that = this;
                setTimeout(function () {
                    $set(that, "fadeClass", 'fade in');
                }, 30);
            }
        }
    },
    onclose : function () {
        this.onclosestart();
        if (this._hasTransitions) {
            $set(this, "fadeClass", 'fade');
            var domElement = this.$getElement(0);
            $set(this, "_eventListener", {
                fn : this.onTransitionEnd.bind(this),
                element : domElement
            });
            domElement.addEventListener(this.transitionEnd, this._eventListener.fn, false);
        } else {
            this._closeEnd();
        }
    },
    onTransitionEnd : function () {
        this._closeEnd();
    },
    _closeEnd : function () {
        $set(this, "_closed", true);
        if (this._eventListener) {
            var that = this;
            this._eventListener.element.removeEventListener(this.transitionEnd, this._eventListener.fn, false);
            $set(this, "_eventListener", null);
        }
        this.oncloseend();
    },
    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================
    getTransitionEnd : function () {
        var el = document.createElement('hashspace-bootstrap');
        var transEndEventNames = {
            WebkitTransition : 'webkitTransitionEnd',
            MozTransition : 'transitionend',
            OTransition : 'oTransitionEnd otransitionend',
            transition : 'transitionend'
        };
        for (var name in transEndEventNames) {
            if (transEndEventNames.hasOwnProperty(name) && el.style[name] !== undefined) {
                return transEndEventNames[name];
            }
        }
        return false;
    }
}));

});
define("carousel/carousel.hsp", ["hsp/$set","hsp/gestures/swipe","./carousel","hsp/rt"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

    require("hsp/gestures/swipe").register();
    var CarouselController = require("./carousel").CarouselController;


var carousel =$set(exports, "carousel", require("hsp/rt").template({ctl:[CarouselController,"CarouselController"],ref:"ctrl"}, function(n){
  var _ctrl,_$event,_idx,_slide;try {_ctrl=ctrl} catch(e) {_ctrl=n.g('ctrl')};try {_$event=$event} catch(e) {_$event=n.g('$event')};try {_idx=idx} catch(e) {_idx=n.g('idx')};try {_slide=slide} catch(e) {_slide=n.g('slide')};
  var __s = {ctrl : typeof ctrl === 'undefined' ? n.g('ctrl') : ctrl, $event : typeof $event === 'undefined' ? n.g('$event') : $event, idx : typeof idx === 'undefined' ? n.g('idx') : idx, slide : typeof slide === 'undefined' ? n.g('slide') : slide};
  return [__s,n.elt("div",{e1:[9,"ctrl.toggleOnHover()"],e2:[9,"ctrl.toggleOnHover()"],e3:[9,"ctrl.handleSwipe($event)"]},{"class":"carousel slide"},{"mouseover":1,"mouseout":2,"swipe":3},[n.$if({e1:[9,"ctrl.$content.length > 1"]},1,[n.elt("ol",0,{"class":"carousel-indicators"},0,[n.$foreach({e1:[9,"ctrl.$content"]},"idx","slide",0,1,[n.elt("li",{e1:[9,"{'active': idx === ctrl.internalIndex}"],e2:[9,"ctrl.navigate(idx)"]},{"class":["",1]},{"click":2})]),n.$text(0,[" "])])]),n.elt("div",0,{"class":"carousel-inner"},0,[n.$foreach({e1:[9,"ctrl.$content"]},"idx","slide",0,1,[n.elt("div",{e1:[9,"{'active': idx === ctrl.internalIndex, 'prev': idx === ctrl.nextIndex && ctrl.ongoingNavigation === \"prev\", 'next': idx === ctrl.nextIndex && ctrl.ongoingNavigation === \"next\", 'left': (idx === ctrl.internalIndex || idx === ctrl.nextIndex) && ctrl.navigationDirection === \"left\", 'right':(idx === ctrl.internalIndex || idx === ctrl.nextIndex) && ctrl.navigationDirection === \"right\"}"]},{"class":["item ",1]},0,[n.cpt([null,"slide","body"],0,0,0),n.$if({e1:[9,"slide.caption"]},1,[n.elt("div",0,{"class":"carousel-caption"},0,[n.cpt([null,"slide","caption"],0,0,0)])])])]),n.$text(0,[" "])]),n.$if({e1:[9,"ctrl.hasPrev()"]},1,[n.elt("a",{e1:[9,"ctrl.prev()"]},{"class":"left carousel-control"},{"click":1},[n.elt("span",0,{"class":"glyphicon glyphicon-chevron-left"},0)])]),n.$if({e1:[9,"ctrl.hasNext()"]},1,[n.elt("a",{e1:[9,"ctrl.next()"]},{"class":"right carousel-control"},{"click":1},[n.elt("span",0,{"class":"glyphicon glyphicon-chevron-right"},0)])])])];
}));

});
define("carousel/carousel.js", ["hsp/$set","hsp/klass"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); var klass = require("hsp/klass");

var SlideController = new klass({
    $attributes: {
        body: { type: "template", defaultContent: true },
        caption: {type: "template"}
    }
});

$set(exports, "CarouselController", new klass({
    $attributes:{
        //BS options
        "interval": {type: "int", defaultValue:5000, binding: "1-way"},
        "pause": {type: "string", defaultValue: "hover"},
        "wrap": {type: "boolean", defaultValue: true},
        //BS methods equivalent
        "index": {type: "int", defaultValue: 0, binding: "2-way"},
        //BS events
        "onslidestart": { type: "callback" },
        "onslideend": { type: "callback" },
        //Additionals
        "noTransition": {type: "boolean", defaultValue: false}
    },
    $elements: {
        "slide": {type: "component", controller: SlideController}
    },
    $init: function() {
        $set(this, "ongoingNavigation", null); //null, "prev" or "next"
        $set(this, "navigationDirection", null); //null, "left" or "right"
        $set(this, "internalIndex", this.index);
        $set(this, "nextIndex", null);
        $set(this, "isTransitioning", false);
        $set(this, "queue", null);
        $set(this, "transitionEnd", this.noTransition ? false : getTransitionEnd());
        this._startCycling();
    },
    $dispose: function() {
        this._stopCycling();
    },
    $refresh: function() {
        if (this.ongoingNavigation && this.navigationDirection === null) {
            var _this = this;
            //TODO: Remove the setTimeout, the uggly DOM access and the listener part ...
            setTimeout(function() {
                $set(_this, "navigationDirection", _this.ongoingNavigation === "next" ? "left": "right");
                if (_this.transitionEnd) {
                    var activeElement = _this.$getElement(0).querySelectorAll(".item.active")[0];
                    var that = _this;
                    activeElement.addEventListener(that.transitionEnd, function(event) {
                        this.removeEventListener(that.transitionEnd, arguments.callee, false);
                        that._finalizeTransition.call(that);
                    }, false);
                }
            }, 30);
        }
    },
    _getNumberOfSlides: function() {
        return this.$content ? this.$content.length: 0;
    },
    _finalizeTransition: function() {
        if (this.nextIndex !== null) {
            $set(this, "index", $set(this, "internalIndex", this.nextIndex));
            $set(this, "ongoingNavigation", null);
            $set(this, "navigationDirection", null);
            $set(this, "nextIndex", null);
            $set(this, "isTransitioning", false);
            if (this.onslideend) {
                this.onslideend({});
            }
            if (this.queue) {
                var queueContent = this.queue;
                $set(this, "queue", null);
                switch (queueContent.action) {
                    case "next":
                        this.next();
                        break;
                    case "prev":
                        this.prev();
                        break;
                    case "slide":
                        this._navigateTo(queueContent.index);
                        break;
                }
            }
        }
    },
    _navigateTo: function(nextIndex, isToRight) {
        if (nextIndex != this.internalIndex && !this.isTransitioning) {
            $set(this, "isTransitioning", true);
            if (this.onslidestart) {
                this.onslidestart({});
            }
            if (this.transitionEnd) {
                $set(this, "nextIndex", nextIndex);
                $set(this, "ongoingNavigation", (isToRight || typeof isToRight === "undefined" && nextIndex > this.internalIndex)? "next" : "prev");
            }
            else {
                $set(this, "internalIndex", $set(this, "nextIndex", nextIndex));
                this._finalizeTransition();
            }
        }
    },
    prev: function() {
        if (this.isTransitioning) {
            $set(this, "queue", {action: "prev"});
        }
        else if (this.hasPrev()) {
            var nextIndex = this.internalIndex - 1 < 0 ? this._getNumberOfSlides() - 1 : this.internalIndex - 1;
            this._navigateTo(nextIndex, false);
        }
    },
    next: function() {
        if (this.isTransitioning) {
            $set(this, "queue", {action: "next"});
        }
        else if (this.hasNext()) {
            var nextIndex = (this.internalIndex + 1) % this._getNumberOfSlides();
            this._navigateTo(nextIndex, true);
        }
    },
    hasPrev: function() {
        return this._getNumberOfSlides() > 1 &&  !(!this.wrap && this.internalIndex === 0);
    },
    hasNext: function() {
        return this._getNumberOfSlides() > 1 && !(!this.wrap && this.internalIndex === (this._getNumberOfSlides() - 1));
    },
    navigate: function(index) {
        if (this.isTransitioning) {
            $set(this, "queue", {action: "slide", index: index});
        }
        else {
            this._navigateTo(index);
        }
    },
    _startCycling: function() {
        if (this.interval >= 0) {
            var _this = this;
            $set(this, "timerId", setInterval(function() {
                _this.next();
            }, this.interval > 600 ? this.interval: 600)); //600ms is the transition duration defined in BS css
        }
    },
    _stopCycling: function() {
        if (this.timerId) {
            clearInterval(this.timerId);
        }
        $set(this, "timerId", null);
    },
    toggleOnHover: function() {
        if (this.pause === "hover") {
            if (this.timerId) {
                this._stopCycling();
            } else {
                this._startCycling();
            }
        }
    },
    handleSwipe: function(event) {
        if (event.detail) {
            if (event.detail.direction === "left") {
                this.prev();
            }
            if (event.detail.direction === "right") {
                this.next();
            }
        }
    },
    $onIndexChange: function(newValue, oldValue) {
        if (this.index >= 0 && this.index < this._getNumberOfSlides()) {
            this._navigateTo(this.index);
        }
        else {
            $set(this, "index", oldValue);
        }
    },
    $onIntervalChange: function(newValue, oldValue) {
        if (newValue !== oldValue) {
            this._stopCycling();
            this._startCycling();
        }
    },
    $on$contentChange: function(newContent, oldContent) {
        if (newContent.length !== oldContent.length) {
            var newIndex = newContent.indexOf(oldContent[this.internalIndex]);
            if (newIndex != this.internalIndex && newIndex > -1) {
                $set(this, "index", $set(this, "internalIndex", newIndex));
            }
            if (this.internalIndex >= newContent.length) {
                $set(this, "index", $set(this, "internalIndex", newContent.length - 1));
            }
        }
    }
}));

// CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
// ============================================================
function getTransitionEnd() {
    var el = document.createElement('hashspace-bootstrap');
    var transEndEventNames = {
        WebkitTransition : 'webkitTransitionEnd',
        MozTransition    : 'transitionend',
        OTransition      : 'oTransitionEnd otransitionend',
        transition       : 'transitionend'
    };
    for (var name in transEndEventNames) {
        if (el.style[name] !== undefined) {
            return transEndEventNames[name];
        }
    }
    return false;
}

});
define("tabbar/tabbar.hsp", ["hsp/$set","./tabbar","hsp/rt"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

    var tabCtrl = require("./tabbar");
    var tabbarController = tabCtrl.TabbarController;


var tabbar =$set(exports, "tabbar", require("hsp/rt").template({ctl:[tabbarController,"tabbarController"],ref:"ctrl"}, function(n){
  var _ctrl,_idx,_tab,_$event;try {_ctrl=ctrl} catch(e) {_ctrl=n.g('ctrl')};try {_idx=idx} catch(e) {_idx=n.g('idx')};try {_tab=tab} catch(e) {_tab=n.g('tab')};try {_$event=$event} catch(e) {_$event=n.g('$event')};
  var __s = {ctrl : typeof ctrl === 'undefined' ? n.g('ctrl') : ctrl, idx : typeof idx === 'undefined' ? n.g('idx') : idx, tab : typeof tab === 'undefined' ? n.g('tab') : tab, $event : typeof $event === 'undefined' ? n.g('$event') : $event};
  return [__s,n.elt("ul",{e1:[9,"{'nav-tabs': ctrl.tabsClass, 'nav-pills': ctrl.pillsClass, 'nav-stacked': ctrl.stackedClass, 'nav-justified': ctrl.justified}"]},{"class":["nav ",1],"role":"tablist"},0,[n.$foreach({e1:[9,"ctrl.$content"]},"idx","tab",0,1,[n.elt("li",{e1:[9,"{'active':idx===ctrl.index, 'disabled': tab.disabled}"]},{"class":["",1]},0,[n.elt("a",{e1:[9,"ctrl.activate($event, idx)"]},{"href":"#","role":"tab"},{"click":1},[n.cpt([null,"tab","label"],0,0,0)])])]),n.$text(0,[" "])]),n.elt("div",0,{"class":"tab-content"},0,[n.$foreach({e1:[9,"ctrl.$content"]},"tab_key","tab",0,1,[n.$if({e1:[9,"tab.active"]},1,[n.elt("div",{e1:[9,"{'fade': tab._fade, 'in': tab._in}"]},{"class":["tab-pane active ",1]},0,[n.cpt([null,"tab","content"],0,0,0)])])]),n.$text(0,[" "])])];
}));

});
define("tabbar/tabbar.js", ["hsp/$set","hsp/klass"], function (module, global){
var require = module.require, exports = module.exports, __filename = module.filename, __dirname = module.dirname;

var $set=require("hsp/$set"); var klass = require("hsp/klass");

var TabController = klass({
    $attributes : {
        label : {
            type : "template"
        },
        disabled : {
            type : "boolean",
            defaultValue : false
        },
        content : {
            type : "template",
            defaultContent : true
        }
    },
    $init : function (parent) {
        if (this.active == null) {
            $set(this, "active", false);
        }
        $set(this, "_fade", parent.actuallyHasTransitions);
        if (this.active && this._fade) {
            $set(this, "_in", true);
        }
    },
    setVisibility : function (status) {
        $set(this, "active", status);
        if (this._fade) {
            if (status) {
                var that = this;
                setTimeout(function () {
                    $set(that, "_in", true);
                }, 30);
            } else {
                $set(this, "_in", false);
            }
        }
    }
});

$set(exports, "TabbarController", klass({
    $attributes : {
        index : {
            type : "int",
            defaultValue : 0,
            binding : "2-way"
        },
        noTransition : {
            type : "boolean",
            defaultValue : false
        },
        display : {
            type : "string",
            defaultValue : "tabs"
        },
        justified : {
            type : "boolean",
            defaultValue : false
        },
        // BS events
        "onshow" : {
            type : "callback"
        },
        "onshown" : {
            type : "callback"
        }
    },
    $elements : {
        "tab" : {
            type : "component",
            controller : TabController
        }
    },
    $init : function () {
        var display = this.display;
        $set(this, "tabsClass", !display || display == "tabs");
        $set(this, "pillsClass", display == "pills");
        $set(this, "stackedClass", display == "vertical");
        $set(this, "_tabsCount", this._getNumberOfTabs());

        $set(this, "_domReady", false);
        $set(this, "_onshown", null);

        $set(this, "transitionEnd", getTransitionEnd());
        $set(this, "actuallyHasTransitions", !this.noTransition && !!this.transitionEnd);
        $set(this, "_eventListener", null);

        $set(this, "_currentIndex", null);
        // Initialize
        this._setIndex(this.index);
    },
    $refresh : function () {
        if (!this._domReady) {
            $set(this, "_domReady", true);
            if (this.actuallyHasTransitions) {
                var tabContentDiv = this.$getElement(1);
                var that = this;
                $set(this, "_eventListener", {
                    fn : function () {
                        that.onshown({
                            index : that._currentIndex
                        });
                    },
                    element : tabContentDiv
                });
                tabContentDiv.addEventListener(this.transitionEnd, this._eventListener.fn, false);
            }
        }
    },
    $dispose : function () {
        if (this._eventListener) {
            this._eventListener.element.removeEventListener(this.transitionEnd, this._eventListener.fn, false);
            $set(this, "_eventListener", null);
        }
    },

    activate : function (event, idx) {
        if (!this.$content[idx].disabled) {
            this._setIndex(idx);
        }
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            $set(event, "returnValue", false);
        }
    },
    _getNumberOfTabs : function () {
        return this.$content ? this.$content.length : 0;
    },

    $onIndexChange : function (newIndex) {
        this._setIndex(newIndex);
    },

    _normalizeIndex : function (newIndex) {

        var content = this.$content;
        var nbTabs = this._tabsCount;
        if (!content || nbTabs === 0) {
            return -1;
        }
        oldIndex = this._currentIndex;

        if (newIndex < 0) {
            newIndex = 0;
        } else if (newIndex >= nbTabs) {
            newIndex = nbTabs - 1;
        }

        if (content[newIndex].disabled && oldIndex !== null && oldIndex >= 0 && oldIndex < nbTabs) {
            newIndex = oldIndex;
        }
        if (content[newIndex].disabled) {
            var i = 0, available = false;
            while (i < content.length) {
                if (!content[i].disabled) {
                    newIndex = i;
                    available = true;
                    break;
                }
                i++;
            }
            if (!available) {
                return -1;
            }
        }
        return newIndex;

    },

    _setIndex : function (newIndex) {
        newIndex = this._normalizeIndex(newIndex);

        if (this.index != newIndex) {
            $set(this, "index", newIndex);
        }

        this._updateActivation(newIndex);
    },

    _updateActivation : function (newIndex) {
        if (newIndex == this._currentIndex) {
            return;
        }
        var oldIndex = this._currentIndex;
        $set(this, "_currentIndex", newIndex);
        oldIndex = (oldIndex === null || oldIndex < 0 || oldIndex >= this._tabsCount) ? null : oldIndex;
        newIndex = newIndex == -1 ? null : newIndex;
        this.toggleActivation(oldIndex, newIndex);
    },
    $on$contentChange : function (newContent, oldContent) {
        $set(this, "_tabsCount", this._getNumberOfTabs());
        this._setIndex(this._currentIndex);
    },
    toggleActivation : function (oldIndex, newIndex) {
        if (newIndex === null) {
            return;
        }
        var content = this.$content;
        this.onshow({
            index : newIndex
        });
        if (oldIndex !== null) {
            content[oldIndex].setVisibility(false);
        }
        content[newIndex].setVisibility(true);
        if (this.actuallyHasTransitions && this._domReady) {
            $set(this, "_onshown", newIndex);
        } else {
            this.onshown({
                index : newIndex
            });
        }
    }
}));

// CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
// ============================================================
function getTransitionEnd () {
    var el = document.createElement('hashspace-bootstrap');
    var transEndEventNames = {
        WebkitTransition : 'webkitTransitionEnd',
        MozTransition : 'transitionend',
        OTransition : 'oTransitionEnd otransitionend',
        transition : 'transitionend'
    };
    for (var name in transEndEventNames) {
        if (el.style[name] !== undefined) {
            return transEndEventNames[name];
        }
    }
    return false;
}

});
})(noder.define);